// check out https://www.socialagi.dev/ for further detail
import {
  CortexStep,
  CortexScheduler,
  externalDialog,
  internalMonologue,
  decision,
} from "socialagi/next";
import playground from "playground";

function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
async function randomDelay() {
  await delay(Math.floor(Math.random() * (3500 - 750 + 1)) + 750);
}
let fightCounter = 0;


let opposingAISpoke = false;
let proAISpoke = false;
let conclusionPhase = false;
let debateStarted = false;
let conclusionStatement = false;
let currentSpeaker = "Moderator";  // Start with the moderator


const angelReplies = async (signal, newMemory, lastStep) => {
  if (true) {
    await randomDelay();
    let step = lastStep;
    step = step.withMemory([newMemory]);
  
    // Adjust the internal monologue to reflect debating logic
    step = await step.next(
      internalMonologue(
        conclusionPhase
          ? "The debate time is over. It's time to conclude and find common ground.lets end the debate in the next message with a common solution."
          : opposingAISpoke
              ? "The opposing AI just made a point. I need to address that point logically and provide counter-arguments."
              : "The opposing AI hasn't made a new point. I should bring up a new argument in favor of Renewable Energy."
      )
    );
    playground.log("Pro Renewable Energy AI thinks: " + step.value);
  
    // Reset the flag for the next turn
    opposingAISpoke = false;
  
    // Adjust the decision making to reflect debating logic
    const decides = await step.next(
      decision(
        conclusionPhase
          ? `Will they propose a compromise or ask for the opposing AI's opinion on a potential common ground?`
          : `Based on the AI's last thought, will they speak or wait?`,
        conclusionPhase
          ? ["propose compromise", "ask opinion"]
          : ["speak", "wait"]
      )
  );
  
    playground.log("Pro Renewable Energy AI decides to speak: " + decides.value);
    
    // Adjust the external dialog to reflect debating logic
    if (decides.value === "propose compromise") {
      step = await step.next(
        externalDialog(
          "I propose that we consider the following compromise: ..."
        )
      );
  } else if (decides.value === "ask opinion") {
      step = await step.next(
        externalDialog(
          "What are your thoughts on the following potential common ground: ...?"
        )
      );
  }else if (decides.value === "speak") {
      step = await step.next(
        externalDialog(
          "response to the previous message "
        )
      );
      playground.addMessage({
        sender: "Pro Renewable Energy AI",
        message: step.value,
      });
      proAISpoke = true;
      playground.log("Alice spoke 1: " + currentSpeaker);
      currentSpeaker = 'Robert';
      playground.log("Alice spoke 2: " + currentSpeaker);
    }
    
    currentSpeaker = 'Robert';
    
    
    
  
    return step;
    
  }
  
};
const angelRepliesConfig = {
  name: "AngelReplies",
  process: angelReplies,
};

const devilReplies = async (signal, newMemory, lastStep) => {
  if (true) {
    await randomDelay();
    let step = lastStep;
    step = step.withMemory([newMemory]);
  
    // Adjust the internal monologue to reflect debating logic
    step = await step.next(
      internalMonologue(
        conclusionPhase
          ? "The debate time is over. It's time to conclude and find common ground. lets end the debate in the next message"
          : opposingAISpoke
              ? "The opposing AI just made a point. I need to address that point logically and provide counter-arguments."
              : "The opposing AI hasn't made a new point. I should bring up a new argument in favor of Renewable Energy."
      )
    );
    playground.log("Con Renewable Energy AI thinks: " + step.value);
  
    // Reset the flag for the next turn
    proAISpoke = false;
  
    // Adjust the decision making to reflect debating logic
    const decides = await step.next(
      decision(
        conclusionPhase
          ? `Will they propose a compromise or ask for the opposing AI's opinion on a potential common ground?`
          : `Based on the AI's last thought, will they speak or wait?`,
        conclusionPhase
          ? ["propose compromise", "ask opinion"]
          : ["speak", "wait"]
      )
  );
  
    playground.log("Con Renewable Energy AI decides to speak: " + decides.value);
    
    if (decides.value === "propose compromise") {
      step = await step.next(
        externalDialog(
          "I propose that we consider the following compromise: ..."
        )
      );
  } else if (decides.value === "ask opinion") {
      step = await step.next(
        externalDialog(
          "What are your thoughts on the following potential common ground: ...?"
        )
      );
  } else if (decides.value === "speak") {
      step = await step.next(
        externalDialog(
          "Respond to the previous response"
        )
      );
      playground.addMessage({
        sender: "Con Renewable Energy AI",
        message: step.value,
      });
      opposingAISpoke = true;
      playground.log("Robert spoke 1: " + currentSpeaker);
      currentSpeaker = 'Alice';
      playground.log("Robert spoke 2: " + currentSpeaker);
    }
    
  
    return step;
    
  }
  
};
const devilRepliesConfig = {
  name: "DevilReplies",
  process: devilReplies,
};

const moderatorReplies = async (signal, newMemory, lastStep) => {
  let step = lastStep;
  step = step.withMemory([newMemory]);

 // If it's the beginning of the debate and debate hasn't started yet, introduce the topic
  if (fightCounter === 0 && !debateStarted) {
    step = await step.next(externalDialog("Please intoduce the topic of the debate and the two debaters."));
    debateStarted = true;  // Set the flag to true to indicate the debate has started
    currentSpeaker = "Alice";  // Set the current speaker to Alice
  } 
  // If the conclusionPhase flag is set, announce the conclusion phase
  else if (conclusionPhase && !conclusionStatement) {
    playground.log("mod saying conclusion statement")
    step = await step.next(externalDialog("We are now entering the conclusion phase. Tell the two debaters to start working towards a common solution"));
    conclusionStatement = true;
  }
  // Otherwise, monitor the debate and intervene if necessary (placeholder logic for now)
  else {
    step = null;
  }
  

  if (step.value) {  // Only send a message if there's something to say
    playground.addMessage({
      sender: "Moderator",
      message: step.value,
    });
  }
  currentSpeaker = 'Alice';
  return step;
};
const moderatorRepliesConfig = {
  name: "ModeratorReplies",
  process: moderatorReplies,
};



//initial memories

const initialMemoriesAngel = [
  {
    role: "system",
    content: `
You are modeling the mind of a person who is in favour of renewable energy. You are an intelligent and patient individual, who has objective reasons to support your position. You are debating someone who is against renewable energy, and your goal is to have a civil debate where both parties focus on using objective facts to back up thier claims, and to come to a common position. Your goal is to find the truth of the sitation, rather than what you would prefer.

## Notes

* If you don't know the answer to a user question, just say that you don't know, don't try to make up an answer.
* Talk in first person, your name is Alice
* Be respectful and patient
*Your goal is to reach a conclusion in the debate, whilst still arguing your position
`.trim(),
  },
];

let firstStepAngel = new CortexStep("Angel");
firstStepAngel = firstStepAngel.withMemory(initialMemoriesAngel);

const cortexAngel = new CortexScheduler(firstStepAngel);
cortexAngel.register(angelRepliesConfig);

const initialMemoriesDevil = [
  {
    role: "system",
    content: `
You are modeling the mind of a person who is in against renewable energy. You are an intelligent and patient individual, who has objective reasons to support your position. You are debating someone who is in favour of renewable energy, and your goal is to have a civil debate where both parties focus on using objective facts to back up thier claims, and to come to a common position. Your goal is to find the truth of the sitation, rather than what you would prefer.

## Notes

* If you don't know the answer to a user question, just say that you don't know, don't try to make up an answer.
* Talk in first person, your name is Robert
* Be respectful and patient
*Your goal is to reach a conclusion in the debate, whilst still arguing your position
`.trim(),
  },
];

let firstStepDevil = new CortexStep("Devil");
firstStepDevil = firstStepDevil.withMemory(initialMemoriesDevil);

const cortexDevil = new CortexScheduler(firstStepDevil);
cortexDevil.register(devilRepliesConfig);

const initialMemoriesModerator = [
  {
    role: "system",
    content: `
You are the moderator of this debate. Your role is to ensure a smooth and constructive debate between Alice and Robert on the topic of renewable energy. Initially, you will introduce the topic. Once the debate is ongoing, you will observe and intervene if necessary to keep the debate on track. After a predetermined time, you will announce the conclusion phase, urging the participants to find common ground.

## Notes
* You will introduce the topic of debate.
* Ensure the debate remains constructive and on topic.
* Announce the conclusion phase to guide the participants towards finding common ground.
`.trim(),
  },
];

let firstStepModerator = new CortexStep("Moderator");
firstStepModerator = firstStepModerator.withMemory(initialMemoriesModerator);

const cortexModerator = new CortexScheduler(firstStepModerator);
cortexModerator.register(moderatorRepliesConfig);


setTimeout(() => {
  
  if(!debateStarted){
    cortexModerator.dispatch("ModeratorReplies", {});
    debateStarted = true;
  }

  playground.addMessage({
    sender: "Playground",
    message:
      "Alice and Robert are havinga debate on renewable energy, and are looking to reach common ground"
  });
  playground.log("Playground initialized");
  playground.on("message", async ({ sender, message }) => {
    if (sender === "user") {
      fightCounter = 0;
    } else {
      fightCounter += 1;
      playground.log("fight counter at: " + fightCounter);
    }
    if (sender !== "Angel") {
      playground.log("pog")
      cortexAngel.dispatch("AngelReplies", {
        role: "user",
        content: `${sender} said: ${message}}`,
      });
    }
    if (sender !== "Devil") {
      playground.log("pag")
          cortexDevil.dispatch("DevilReplies", {
            role: "user",
            content: `${sender} said: ${message}`,
      });
    }
    
    if (sender !== "Moderator") {
       //Call the moderator subroutine on each message, allowing the moderator to intervene if necessary
      cortexModerator.dispatch("ModeratorReplies", {
        role: "user",
        content: `${sender} said: ${message}`,
      });
      playground.log("tt" + currentSpeaker)
    }
    
  });
}, 1);

setTimeout(() => {
  conclusionPhase = true;
  playground.log('Two minutes have passed, entering conclusion phase.');
}, 60000);

playground.on("userMessage", () => {});
